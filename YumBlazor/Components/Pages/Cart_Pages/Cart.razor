@page "/cart"

@using System.Globalization
@using Microsoft.AspNetCore.Authorization
@inject AuthenticationStateProvider _authenticationStateProvider
@inject ICartRepository _cartRepository

@attribute [Authorize]

<PageTitle>Home</PageTitle>

@if(IsProcessing)
{
    <div class="position-absolute w-100 vh-100 d-flex flex-column align-items-center bg-white justify-content-center">
        <img src="/images/loading.gif" alt="loading" />

    </div>
}
else
{
	@if(Carts.Any())
	{
		<div class="row w-100">
			<div class="col-lg-6 col-12">
				<div class="container p-4 m-2">
					<h4 class="text-center text-success display-6">
						Cart Summary
					</h4>

					@foreach (var cart in Carts)
					{
						<div class="d-flex p-2 m-2">
							<div class="card flex-row w-100">
								<img class="card-img-left" style="width: 120px;" src="@(cart.Product.ImageUrl ?? "/images/default.png")" />
								<div class="card-body">
						
									<div class="d-flex justify-content-between align-items-center">
		
											<h4 class="">
												@cart.Product.Name
											</h4>
											<h4 class="">
												@cart.Product.Price.ToString("C", CultureInfo.GetCultureInfo("en-us"))
											</h4>
					
									</div>
									<div class="flex-fill">
										<h4 class="text-danger">
											@((cart.Count * cart.Product.Price).ToString("C", CultureInfo.GetCultureInfo("en-us")))
										</h4>
									</div>
						
									<div class="d-flex justify-content-between align-items-center">
										<div class="d-flex justify-content-between g-0">
									
											<span @onclick="()=>UpdateCartItem(cart.ProductId,-1)">
												<i class="bi bi-dash-circle-fill btn text-secondary"></i>
											</span>
											<span class="ml-1 me-1">
												<b class="lead">@cart.Count</b>
											</span>
												<span @onclick="()=>UpdateCartItem(cart.ProductId,1)">
												<i class="bi bi-plus-circle-fill btn text-secondary"></i>
											</span>
										</div>
											<button class="btn btn-danger" @onclick="()=>UpdateCartItem(cart.ProductId,-10000)">
											Remove
										</button>
									</div>
						
								</div>
							</div>
						</div>
					}
				</div>
			</div>
			<div class="col-lg-6 col-12 p-4">
				<div class="card">
					<div class="card-header text-success text-center display-6">
						Pickup Details
					</div>
						<EditForm Model="OrderHeader" FormName="CartForm" OnValidSubmit="ProcessOrderCreation">
							<DataAnnotationsValidator/>
							<div class="card-body">
	
								<div class="form-group">
									<label>Name</label>
									<InputText @bind-Value="OrderHeader.Name" type="text" class="form-control" />
									<ValidationMessage For="@(()=>OrderHeader.Name)"/>
								</div>
								<div class="form-group">
									<label>Email</label>
									<InputText @bind-Value="OrderHeader.Email" type="text" class="form-control" />
									<ValidationMessage For="@(()=>OrderHeader.Email)" />
								</div>
								<div class="form-group">
									<label>Phone</label>
									<InputText @bind-Value="OrderHeader.PhoneNumber" type="text" class="form-control" />
									<ValidationMessage For="@(()=>OrderHeader.PhoneNumber)" />
								</div>
					
								<div class="card mt-4 bg-light">
									<div class="card-body">
										<h4>
											Grand Total: @OrderHeader.OrderTotal.ToString("C",CultureInfo.GetCultureInfo("en-us"))
										</h4>
										<h4>
											No. of Items: @TotalItems
										</h4>
									</div>

								</div>

							</div>
							<button type="submit" class="btn btn-success m-4">
								Looks Good? Place Order!
							</button>
				
						</EditForm>
				</div>
			</div>
		</div>
	}
	else
	{
		<div class="p-4">
			<div class="alert alert-warning">
				Your cart is empty! Please add items to cart.
			</div>
		</div>
	}
}

@code {
	private IEnumerable<YumBlazor.Data.Cart> Carts = new List<YumBlazor.Data.Cart>();
	//private IEnumerable<Cart> Carts = new List<Cart>();

	private bool IsProcessing { get; set; } = true;
	[SupplyParameterFromForm]
	public OrderHeader OrderHeader { get; set; } = new OrderHeader();

	private int TotalItems { get; set; } = 0;

	protected async override Task OnInitializedAsync()
	{
		var authState = await _authenticationStateProvider.GetAuthenticationStateAsync();
		var user = authState.User;
		OrderHeader.Email = user.FindFirst(u => u.Type.Contains("email"))?.Value;
		OrderHeader.UserId = user.FindFirst(u => u.Type.Contains("nameidentifier"))?.Value;
		OrderHeader.Status = SD.StatusPending;
	}

	protected async override Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			await LoadCart();
			IsProcessing = false;
			StateHasChanged();
		}
	}



	private async Task LoadCart()
	{
		
		Carts = await _cartRepository.GetAllAsync(OrderHeader.UserId);
		OrderHeader.OrderTotal = 0;
		TotalItems = 0;
		foreach (var cart in Carts)
		{
			OrderHeader.OrderTotal += (Convert.ToDouble(cart.Product.Price) * cart.Count);
			TotalItems += cart.Count;
		}
		OrderHeader.OrderTotal = Math.Round(OrderHeader.OrderTotal, 2);
	}

	private async Task UpdateCartItem(int productId, int updateBy)
	{
	
		var result = await _cartRepository.UpdateCartAsync(OrderHeader.UserId, productId, updateBy);

		await LoadCart();

	}
	private async Task ProcessOrderCreation()
	{
		
	}

}
